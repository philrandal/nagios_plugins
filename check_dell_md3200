#!/usr/bin/php
<?php

$progname = "check_dell_md3200";
$version = "1.0";
//base path for the smcli client
$smcli = getenv("SMCLI_PATH") ?: "/opt/dell/mdstoragemanager/client/SMcli";

//Exit codes
define("OK", 0);
define("WARNING", 1);
define("CRITICAL", 2);
define("UNKNOWN", 3);
$exit_text = "OK";
$exit_code = 0;

$shortopts = "a:r:";
$longopts = [
    "help", "c1:", "c2:", "debug-no", "debug", "md3000", "no-ping-check", "stats",
    "battery", "power", "sectors", "hotspare", "health",
    "only-totals", "no-totals", "summary", "path", "vd", "perf"
];
$opts = getopt($shortopts, $longopts);

if (!is_array($opts)) {
    set_exit(UNKNOWN);
    display_output("UNKNOWN Error parsing command line arguments");
}
if (isset($opts["help"])) {
    help();
}

//options
$ctrl1 = isset($opts["c1"]) ? $opts["c1"] : "";
$ctrl2 = isset($opts["c2"]) ? $opts["c2"] : "";
$noout = isset($opts["debug-no"]);
$debug = isset($opts["debug"]) || isset($opts["debug-no"]);
$md3000 = isset($opts["md3000"]);
$ping = !isset($opts["no-ping-check"]);
$stats = isset($opts["stats"]);
$statistics=[];

$battery = isset($opts["battery"]) || isset($opts["health"]);
$power = (isset($opts["power"]) || isset($opts["health"])) && !isset($opts["md3000"]);
$sectors = isset($opts["sectors"]) || isset($opts["health"]);
//$hotspare = isset($opts["hotspare"]) || isset($opts["health"]);
$hotspare = isset($opts["hotspare"]);
$health = isset($opts["health"]);

$otot = isset($opts["only-totals"]);
$ntot = isset($opts["no-totals"]);
$summ = isset($opts["summary"]) || isset($opts["vd"]);
$path = isset($opts["path"]) || isset($opts["only-totals"]) || isset($opts["no-totals"]) || isset($opts["vd"]);
$perf = isset($opts["perf"]);

$argAdd = isset($opts["a"]) ? "/" . str_replace("/", "\\/", $opts["a"]) . "/" : "";
$argDel = isset($opts["r"]) ? "/" . str_replace("/", "\\/", $opts["r"]) . "/" : "";

//output
$output_msg = "";

//Regular expressions
//Storage array regular expressions
$regSAHealthComponent = "/Component reporting problem: ([\w -]+)/";
$regSAHealthStatus = "/Status: ([\w -]+)/";
$regSABatteryStatus = "/Battery status: ([\w -]+)/";
$regSABatteryLocation = "/Location: RAID Controller Module in slot (\d+)/";
$regSAPowerInfoSection = "/Total power drawn: (\d+)/";
$regSAPowerInfos = "/(\d+)\s+(\d+)\s+(\d+) Watts/";

//Virtual disks regular expressions
$regVDName = "/Virtual Disk name: ([\w-]+)/";
$regVDPathPref = "/Preferred owner is RAID controller module in slot: ([\w-]+)/";
$regVDPathCurr = "/Current owner is RAID controller module in slot: ([\w-]+)/";
$regVDPerfValues = "/Virtual Disk ([\w-]+)/";
if ($md3000) {
    $regVDPerfHeader = "/\"Storage Arrays \"/";
    $regVDSummValues = "/[\w-]+ +[a-z]+ +[\d,.]+/i";
} else {
    $regVDPerfHeader = "/Objects/";
    $regVDSummValues = "/[\w-]+ +[a-z]+ +[a-z]+ +[\d,.]+/";
}

//Hot spare regular expressions
$regHsSection = "/Total hot spare physical disks:\s+(\d+)/";
$regHsStandby = "/Standby:\s+(\d+)/";
$regHsInuse = "/In use:\s+(\d+)/";

debug_print(microtime(true));
//check if controllers can be reached
if (!ping_check($ctrl1)) {
    $ctrl1 = "";
}
if (!ping_check($ctrl2)) {
    $ctrl2 = "";
}

//exit if none of the controllers are reachable
if (!$ctrl1 && !$ctrl2) {
    set_exit(UNKNOWN);
    display_output("UNKNOWN - unable to reach either controller");
}

//parsing section
$cmds = array();

if ($health) {
    $cmds[] = "show \"$progname start healthstatus\"";
    $cmds[] = "show storagearray healthstatus";
    $cmds[] = "show \"$progname stop healthstatus\"";
}
if ($battery) {
    $cmds[] = "show \"$progname start batteryage\"";
    $cmds[] = "show storagearray batteryage";
    $cmds[] = "show \"$progname stop batteryage\"";
}
if ($sectors) {
    $cmds[] = "show \"$progname start sectors\"";
    $cmds[] = "show storagearray unreadablesectors";
    $cmds[] = "show \"$progname stop sectors\"";
}
if ($power) {
    $cmds[] = "show \"$progname start power\"";
    $cmds[] = "show storagearray powerinfo";
    $cmds[] = "show \"$progname stop power\"";
}
if ($hotspare) {
    $cmds[] = "show \"$progname start hotspare\"";
    $cmds[] = "show storagearray hotsparecoverage";
    $cmds[] = "show \"$progname stop hotspare\"";
}
if ($summ) {
    $cmds[] = "show \"$progname start vd summary\"";
    $cmds[] = "show allvirtualdisks summary";
    $cmds[] = "show \"$progname stop vd summary\"";
}
if ($path) {
    $cmds[] = "show \"$progname start vd paths\"";
    $cmds[] = "show storagearray preferredvirtualdiskowners";
    $cmds[] = "show storagearray virtualdiskdistribution";
    $cmds[] = "show \"$progname stop vd paths\"";
}
if ($perf) {
    $cmds[] = "show \"$progname start vd performance\"";
    $cmds[] = "show allvirtualdisks performancestats";
    $cmds[] = "show \"$progname stop vd performance\"";
}

if (empty($cmds)) {
    set_exit(UNKNOWN);
    display_output("UNKNOWN No commands to send, check program arguments");
}
$cmds = escapeshellarg(implode(";", $cmds) . ";");
$ctrl1 = escapeshellarg($ctrl1);
$ctrl2 = escapeshellarg($ctrl2);
$cmd = "$smcli $ctrl1 $ctrl2 -S -c $cmds";

debug_print(microtime(true));
debug_print($cmd, "command line");
exec($cmd, $strLines, $exitcode);

debug_print(microtime(true));
debug_print(implode("\n", $strLines), "SMcli output");

if ($exitcode !== 0) {
    set_exit(UNKNOWN);
    display_output(get_smcli_error($exitcode));
}

for ($i = 0; $i < count($strLines); $i++) {
    $curLine = $strLines[$i];
    switch ($curLine) {
    case "$progname start healthstatus":
        $clockInSync = true;
        $pbComp = array();
        $currComp = "";
        $failures = false;
        $failInfo = "";
        do {
            $curLine = $strLines[++$i];
            if (strpos($curLine, "clocks in the storage array are out of synchronization") !== false) {
                //Checks if clocks are out of sync
                $clockInSync = false;
            } elseif (preg_match($regSAHealthComponent, $curLine, $mComp)) {
                //Checks if components are healthy
                $currComp = $mComp[1];
                if (!in_array($currComp, $pbComp)) {
                    $pbComp[] = $currComp;
                }
            } elseif (strpos($curLine, "following failures have been found") !== false) {
                //Checks if failures have been found
                $failures = true;
                $k = 0;
                //because some failures are known.
                while ($strLines[$i+$k] != "") {
                    if ($failInfo != "") {
                        $failInfo .= " - ";
                    }
                    $failInfo .= $strLines[$i+$k];
                    $k++;
                }
            }
        } while ($curLine != "$progname stop healthstatus");
        break;

    case "$progname start batteryage":
        $pbBatt = array();
        $currStatus = "";
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regSABatteryStatus, $curLine, $mBatt)) {
                //Checks if battery are healthy
                $currStatus = $mBatt[1];
                $currLoc = "";
                $curLine = $strLines[++$i];
                if (preg_match($regSABatteryLocation, $curLine, $mBattLoc)) {
                    //Retrieves location of battery
                    $currLoc = $mBattLoc[1];
                }
                $pbBatt[] = ["s"=>$currStatus, "l"=>$currLoc];
            }
        } while ($curLine != "$progname stop batteryage");
        break;

    case "$progname start sectors":
        $badSectors = true;
        do {
            $curLine = $strLines[++$i];
            if (strpos($curLine, "currently no unreadable sectors on the storage array") !== false) {
                //Checks if all sectors are OK
                $badSectors = false;
            }
        } while ($curLine != "$progname stop sectors");
        break;

    case "$progname start power":
        $totalPower = 0;
        $powerInfos = array();
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regSAPowerInfoSection, $curLine, $mTP)) {
                //Get total power info
                $totalPower = $mTP[1];
            } elseif (preg_match($regSAPowerInfos, $curLine, $mPI)) {
                //Retrieves power information
                $powerInfos[] = ["E"=>$mPI[1], "S"=>$mPI[2], "P"=>$mPI[3]];
            }
        } while ($curLine != "$progname stop power");
        break;

    case "$progname start vd summary":
        $vdName = "";
        $summValues = array();
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regVDSummValues, $curLine)) {
                //Retrieves the summary values of the virtual disks and the name
                $tmpSummValues = explode (" ", preg_replace("/\s{2,}/", " ", $curLine));
                //MD3200: status == 2, capacity = 3+4
                //MD3000: status == 1, capacity = 2+4
                $vdName = $tmpSummValues[0];
                $summValues[$vdName] = $tmpSummValues;
            }
        } while ($curLine != "$progname stop vd summary");
        break;

    case "$progname start vd paths":
        $vdName = "";
        $arrayPath = array();
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regVDName, $curLine, $mVD)) {
                //Retrieves the name of the virtual disk for the path
                $vdName = $mVD[1];
                if (!isset($arrayPath[$vdName])) {
                    $arrayPath[$vdName] = array();
                }
            } elseif (preg_match($regVDPathPref, $curLine, $mPathPref)) {
                //Retrieves the preferred path
                $arrayPath[$vdName]["Pref"] = $mPathPref[1];
            } elseif (preg_match($regVDPathCurr, $curLine, $mPathCurr)) {
                //Retrieves the current path
                $arrayPath[$vdName]["Curr"] = $mPathCurr[1];
            }
        } while ($curLine != "$progname stop vd paths");
        break;

    case "$progname start vd performance":
        $keysPerf = array();
        $vdPerformance = array();
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regVDPerfHeader, $curLine)) {
                //retrieves the header names of the virtual disks perf values
                $keysPerf = explode (",", str_replace("\"","",$curLine));
            } elseif (preg_match($regVDPerfValues, $curLine, $mVDID)) {
                //Retrieves the perf values of the virtual disks
                $vdName = $mVDID[1];
                $vdPerformance[$vdName] = explode (",", str_replace("\"", "", $curLine));
            }
        } while ($curLine != "$progname stop vd performance");
        break;

    case "$progname start hotspare":
        $hsValues = array();
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regHsSection, $curLine, $mHsTotal)) {
                //Retrieves total number of hot spares
                $hsValues["total"] = $mHsTotal[1];
            } elseif (preg_match($regHsStandby, $curLine, $mHsStandby)) {
                //Retrieves the number of hot spares in standby mode
                $hsValues["standby"] = $mHsStandby[1];
            } elseif (preg_match($regHsInuse, $curLine, $mHsInuse)) {
                //Retrieves the number of hot spares in use
                $hsValues["inuse"] = $mHsInuse[1];
            }
        } while ($curLine != "$progname stop hotspare");
        break;
    }
}

// create the information part of the output

debug_print(microtime(true));
set_exit(OK);
$infos = array();

if ($health) {
    if (count($pbComp)) {
        $compfails = array();
        foreach ($pbComp as $comp) {
            $compfails[] = $comp;
        }
        set_exit(CRITICAL, "component problems");
        $infos[] = "Component problems: " . implode(",", $compfails);
    }
    if ($clockInSync) {
        $infos[] = "Clock OK";
    } else {
        set_exit(WARNING, "clock sync");
        $infos[] = "Clock out of sync";
    }
    if ($failures) {
        set_exit(WARNING, "component failures");
        $infos[] = "Failures: $failInfo";
    }
}

if ($battery) {
    $ok_status = [
        "Optimal",
        "Battery learning",
        "Battery maintenance charging",
    ];
    $battFails = array();
    foreach ($pbBatt as $batt) {
        if (!in_array($batt["s"], $ok_status)) {
            $battFails[] = $batt["l"];
        }
    }
    if (count($battFails)) {
        set_exit(WARNING, "bad batteries");
        $infos[] = count($battFails) . " batteries with issues: " . implode(",", $battFails);
    } else {
        $infos[] = count($pbBatt) . " batteries OK";
    }
}

if ($power) {
    $ps = array();
    foreach ($powerInfos as $power) {
        $ps[] = "Enclosure $power[E] Serial $power[S] $power[P]W";
        if ($stats) {
            $statistics["Power_E$power[E]_S$power[S]"] = $power["P"];
        }
    }
    $ps[] = "Total Consumption ${totalPower}W";
    $infos[] = "Power info: " . implode(",", $ps);
}

if ($sectors) {
    if ($badSectors) {
        set_exit(CRITICAL, "bad disk sectors");
        $infos[] = "Bad disk sectors detected";
    } else {
        $infos[] = "Disk sectors OK";
    }
}

if ($hotspare) {
    $hsErr = array();
    if (isset($hsValues["total"]) && $hsValues["total"] < 1) {
        set_exit(CRITICAL, "hot spare totals");
        $hsErr[] = "No hot spares configured";
    } elseif (!isset($hsValues["total"])) {
        set_exit(UNKNOWN, "hot spare totals");
        $hsValues["total"] = "unknown";
        $hsErr[] = "Unknown hot spares configured";
    }
    if (isset($hsValues["inuse"]) && $hsValues["inuse"] > 0) {
        set_exit(WARNING, "hot spare in use");
        $hsErr[] = "Hot spares in use";
    } elseif (!isset($hsValues["inuse"])) {
        set_exit(UNKNOWN, "hot spare in use");
        $hsValues["inuse"] = "unknown";
        $hsErr[] = "Unknown hot spares in use";
    }
    if (isset($hsValues["standby"]) && $hsValues["standby"] < 1) {
        set_exit(CRITICAL, "hot spare standbys");
        $hsErr[] = "No hot spares available";
    } elseif (!isset($hsValues["standby"])) {
        set_exit(UNKNOWN, "hot spare standbys");
        $hsValues["standby"] = "unknown";
        $hsErr[] = "Unknown hot spares available";
    }
    if ($stats) {
        $statistics["Spares_total"] = $hsValues["total"];
        $statistics["Spares_inuse"] = $hsValues["inuse"];
        $statistics["Spares_avail"] = $hsValues["standby"];
    }
    if (count($hsErr)) {
        $infos[] = "Hot spare status NOT OK: " . implode(",", $hsErr);
    } else {
        $infos[] = "Hot spare status OK";
    }
}

if ($summ) {
    $badVD = array();
    foreach ($summValues as $vdSummary) {
        if ($vdSummary[2] != "Optimal" && $vdSummary[1] != "Optimal") {
            $badVD[] = $vdSummary[0];
        }
    }
    if (count($badVD)) {
        set_exit(WARNING, "virtual disk state");
        $infos[] = "Non-optimal VD: " . implode(",", $badVD);
    } else {
        $infos[] = "All VD optimal";
    }
}

if ($path) {
    $pathErr = array();
    debug_print($arrayPath, "path info");
    foreach ($arrayPath as $vdName=>$vdPath) {
        if ($vdPath["Pref"] != $vdPath["Curr"] ) {
            set_exit(WARNING, "virtual disk path mismatch");
            $pathErr[] = $vdName;
        }
    }
    if (count($pathErr)) {
        $infos[] = "VD on non-preferred path: " . implode(",", $pathErr);
    } else {
        $infos[] = "VD paths OK";
    }
}

if ($perf) {
    $perfTotals = array();
    $perfTotalsC = array();
    $tots = array();
    debug_print($keysPerf + $vdPerformance, "performance info");
    foreach ($keysPerf as $col=>$header) {
        if (($argAdd && !preg_match($argAdd, $header)) || ($argDel && preg_match($argDel, $header))) {
            continue;
        }
        $nbVD = count($vdPerformance);
        $perfTotals[$col] = 0;

        // Add the values
        foreach($vdPerformance as $vdName=>$vdPerf) {
            $val = $vdPerf[$col];
            //Total
            if (strpos($header, "%") > 0 || strpos($header, "Percentage") > 0) {
                $perfTotals[$col] += ($val / $nbVD);
            } else {
                $perfTotals[$col] += $val;
            }
            //Sub total per controller
            if ($path) {
                $ctrl = $arrayPath[$vdName]["Curr"];
                if (!isset($perfTotalsC[$col][$ctrl])) {
                    $perfTotalsC[$col][$ctrl] = 0;
                }
                if (strpos($header, "%") > 0 || strpos($header, "Percentage") > 0) {
                    $perfTotalsC[$col][$ctrl] += ($val / $nbVD);
                } else {
                    $perfTotalsC[$col][$ctrl] += $val;
                }
            }
            //Per Virtual Disk
            if (!$otot) {
                $tots[] = str_replace("Virtual Disk ", "VD ", $vdPerf[0]) . " $header = $val";
            }
        }
        if (!$ntot) {
            // Add the totals
            $tots[] = "Total $header = " . $perfTotals[$col];
            // Add the sub totals per controller
            if ($path) {
                foreach ($perfTotalsC[$col] as $ctrl=>$val) {
                    $tots[] = "Ctrl $ctrl $header = $val";
                }
            }
        }
    }
    if (!$ntot) {
        $infos[] = "Performance totals: " . implode(",", $tots);
    }
}

debug_print(microtime(true));
if (!$noout) {
    $output_msg = "$exit_text " . implode(" - ", $infos);
    if ($stats) {
        $output_msg .= "|";
        foreach($statistics as $k=>$v) {
            $output_msg .= str_replace(" ", "_", $k);
            $output_msg .= "=";
            $output_msg .= preg_replace("/[^\d%]/", "", $v);
            $output_msg .= " ";
        }
    }
    display_output($output_msg);
}



//-----------//
// Functions //
//-----------//

function set_exit($state, $debug_text = "") {
    global $exit_code, $exit_text, $debug;

    if ($exit_code === CRITICAL) {
        return;
    }
    switch ($state) {
    case OK:
        if ($exit_code === WARNING || $exit_code === UNKNOWN) {
            return;
        }
        $exit_code = $state;
        $exit_text = "OK";
        break;
    case WARNING:
        $exit_code = $state;
        $exit_text = "WARNING";
        break;
    case CRITICAL:
        $exit_code = $state;
        $exit_text = "CRITICAL";
        break;
    case UNKNOWN:
        if ($exit_code === WARNING) {
            return;
        }
        $exit_code = $state;
        $exit_text = "UNKNOWN";
        break;
    }
    if ($debug && $debug_text) {
        file_put_contents("php://stderr", "Setting state to $exit_text: $debug_text");
    }
}

function debug_print($val, $header = "") {
    global $debug;
    if (!$debug) {
        return;
    }
    $msg = "";
    if ($header) {
        $msg .= "\n============== start $header =============\n";
    }
    if (is_object($val) || is_array($val)) {
        $msg .= print_r($val, 1);
    } else {
        $msg .= "$val\n";
    }
    if ($header) {
        $msg .= "\n==============  end  $header =============\n";
    }
    file_put_contents("php://stderr", $msg);
}

//Function to check if controller is alive
function ping_check($ip) {
    global $ping;
    if (!$ping) {
        return true;
    }
    $ip = gethostbyname($ip);
    if (!filter_var($ip, FILTER_VALIDATE_IP)) {
        return false;
    }
    exec("ping -c 2 $ip", $foo, $status);
    return ($status == 0) ? true : false;
}

// Function to display the output
function display_output($output_msg) {
    global $exit_code;

    echo "$output_msg\n";
    exit($exit_code);
}

// Function to display detailed help
function help() {
    global $progname, $version;

    $msg = <<< EOF
$progname $version, a tool for automating Dell MD3200 monitoring
Usage: $progname [OPTIONS]

General:
    --c1             IP or hostname of controller 1
    --c2             IP or hostname of controller 2, if present
    --no-ping-check  Do not ping test controllers before connection
    --debug          additional debug output to stderr
    --debug-no       additional debug output to stderr, no output to stdout
    --md3000         specify if the SAN is an md3000
    --help           Print detailed help screen
    --stats          Include stats for graphing with e.g. pnp4nagios

Health:
    --battery        output battery info
    --power          output power info - can be graphed
    --sectors        check if there are any bad sectors detected
    --hotspares      check the state of hot spares in the array
    --health         check controller health (assumes --battery, --power, --sectors, --hot spares)

Virtual Disks:
    --summary        check if the virtual disks are "optimal"
    --path           check if the virtual disks are on preferred path and output totals
    --only-totals    output only totals, and sub totals (assumes --path)
    --no-totals      output no totals and only the value returned by the SAN (assumes --path)
    --vd             shorthand for --summary --path

Virtual Disk Performance:
    --perf           check the virtual disk performance
    -a REGEX         regular expression of the columns to retrieve for perf results
    -r REGEX         regular expression of the columns to remove for perf results

SMcli location will be taken from the SMCLI_PATH environment variable if it exists, or use the default.

EOF;
    set_exit(OK);
    display_output($msg);
}

function get_smcli_error($code) {
    $err = [
        0=>"Successful",
        1=>"Invalid usage",
        2=>"Script file does not exist",
        3=>"Error opening output file",
        4=>"No storage array at address",
        5=>"Addresses specify different storage arrays",
        6=>"No storage array name for host agent connect",
        7=>"Storage array name not at address",
        8=>"Storage array name not unique",
        9=>"Storage array name not in configuration files",
        10=>"No management class for storage array",
        11=>"No storage array in configuration file found",
        12=>"Internal error",
        13=>"Invalid script syntax",
        14=>"Unable to communicate with storage array",
        15=>"Duplicate argument",
        16=>"Execution error",
        17=>"No host at address",
        18=>"World Wide Name not in configuration files",
        19=>"World Wide Name not at address",
        20=>"Unknown IP address",
        21=>"Event monitor configuration file corrupted",
        22=>"Unable to communicate to event monitor",
        23=>"Unable to write alert settings",
        24=>"Wrong organizer node",
        25=>"Command not available",
        26=>"Device not in configuration file",
        27=>"Error updating configuration file",
        28=>"Unknown host error",
        29=>"Sender contact information file not found",
        30=>"Sender contact information file could not be read",
        31=>"Userdata.txt file exists",
        32=>"Invalid email alert notification -I value specified",
        33=>"Invalid email alert notification -f value specified",
    ];
    return "SMcli error $code " . (isset($err[$code]) ? $err[$code] : "");
}

/***
Sample output from commands follows

show storagearray healthstatus;

The following failures have been found:

Degraded Volume
Storage array: tslab7172_7173-5460
Volume group: 1
RAID level: 6
Tray: Controller tray 99, Drawer 1
Affected drive slot(s): 4
Service action (removal) allowed: Yes
Service action LED on component: Yes
Volumes: LUN_1
Status: Degraded

Degraded Volume
Storage array: tslab7172_7173-5460
Volume group: 2
RAID level: 6
Tray: Controller tray 99, Drawer 1
Affected drive slot(s): 5
Service action (removal) allowed: Yes
Service action LED on component: Yes
Volumes: LUN_2
Status: Degraded

Degraded Volume
Storage array: tslab7172_7173-5460
Volume group: 0
RAID level: 6
Tray: Controller tray 99, Drawer 1
Affected drive slot(s): 1
Service action (removal) allowed: Yes
Service action LED on component: Yes
Volumes: LUN_0
Status: Degraded


show storagearray unreadablesectors;

Virtual Disk LUN Accessible By Date/Time Virtual Disk LBA Physical Disk Location Physical Disk LBA Failure Type
Storage 1 Host D9VM2950 6/25/13 12:49:49 AM 0x5ae76c9a Enclosure 0, Slot 15 0xf26929a Logical
Storage 1 Host D9VM2950 6/25/13 12:49:33 AM 0x5ae76d9a Enclosure 0, Slot 10 0xf26929a Physical


show storagearray powerinfo;

Total power drawn: 1,738 Watts
Number of enclosures: 2
Enclosure power input details:

   ENCLOSURE ID  POWER SUPPLY SERIAL NUMBER   INPUT POWER
   0             0                            446 Watts
   0             1                            466 Watts
   1             0                            440 Watts
   1             1                            386 Watts


show storagearray hotsparecoverage;

   The following disk groups are not protected: None - All disk groups are protected
   Total hot spare physical disks: 1

      Standby:  1  
      In use:   0  

   Standby physical disk at enclosure 0, slot 10 (SAS, 558.912 GB)
      Protects the following disk groups: Disk_Group_1


show allvirtualdisks summary;

STANDARD VIRTUAL DISKS SUMMARY
Number of standard virtual disks: 2


Name     Thin Provisioned     Status     Capacity      Accessible by     Source                   
VD_1     No                   Optimal    1,024.000 GB  Host Group POFP   Disk Group Disk_Group_1  
VD_2     No                   Optimal    1,024.000 GB  Host Group POFP   Disk Group Disk_Group_1  


show storagearray preferredvirtualdiskowners;

Virtual Disk name: VD_1
	Preferred owner is RAID controller module in slot: 0
Virtual Disk name: VD_2
	Preferred owner is RAID controller module in slot: 1


show storagearray virtualdiskdistribution;

Virtual Disk name: VD_1
	Current owner is RAID controller module in slot: 0
Virtual Disk name: VD_2
	Current owner is RAID controller module in slot: 1


show allvirtualdisks performancestats;

"Performance Monitor Statistics for Storage Array: MY-SAN1 - Date/Time: 4/15/16 3:52:47 PM - Polling interval in seconds: 5"


"Storage Arrays ","Total IOs","Read %","Primary Read Cache Hit %","Primary Write Cache Hit %","SSD Read Cache Hit %","Current MB/second","Maximum MB/second","Current IO/second","Maximum IO/second"

"Capture Iteration: 1","","","","","","","","",""
"Date/Time: 4/15/16 3:52:47 PM","","","","","","","","",""
"CONTROLLER IN SLOT 1","578.0","0.9","80.0","100.0","0.0","1.4","1.4","115.6","115.6"
"Virtual Disk VD_2","578.0","0.9","80.0","100.0","0.0","1.4","1.4","115.6","115.6"
"CONTROLLER IN SLOT 0","186.0","0.0","0.0","100.0","0.0","0.4","0.4","37.2","37.2"
"Virtual Disk VD_1","186.0","0.0","0.0","100.0","0.0","0.4","0.4","37.2","37.2"
"STORAGE ARRAY TOTALS","764.0","0.7","80.0","100.0","0.0","1.8","1.8","152.8","152.8"

***/
